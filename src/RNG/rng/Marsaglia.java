package RNG.rng;

import RNG.validator.Validation;

public class Marsaglia implements RandomSequence<Double> {

    /**
     * @param x is a real number.
     * @return cumulative distribution function.
     */
    @Override
    public double cdf(double x) {
        return 0;
    }

    /**
     * @return excepted value for random numbers.
     */
    @Override
    public double exv() {
        return 0;
    }

    /**
     * @return probability density function.
     */
    @Override
    public double mean() {
        return 0;
    }

    /**
     * @return probability mass function associated with discrete random variables generated by LCG.
     */
    @Override
    public double probability() {
        return 0;
    }

    /**
     * A sequence can be thought of as a list of elements with a particular order.
     *
     * @return sequential integer random number.
     */
    @Override
    public boolean randomVariable() {
        return false;
    }

    /**
     * @return the range of the cdf() function.
     */
    @Override
    public Interval range() {
        return null;
    }

    /**
     * @return all needed parameters to build a random generator.
     */
    @Override
    public Double[] getParams() {
        return new Double[0];
    }

    /**
     * //	 * @param random_numbers are generated by LCG.
     *
     * @return true/false according to result of{@link #<Validation>}.
     */
    @Override
    public boolean validated() {
        return false;
    }

    /**
     * @return variance for a uniform distribution with [min, max]
     */
    @Override
    public double var() {
        return 0;
    }
}
